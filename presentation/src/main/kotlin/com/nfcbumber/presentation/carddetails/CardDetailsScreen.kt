package com.nfcbumber.presentation.carddetails

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.Warning
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.nfcbumber.domain.model.Card
import com.nfcbumber.domain.model.CardCompatibility
import com.nfcbumber.domain.model.getCompatibility
import com.nfcbumber.domain.model.getDescription
import com.nfcbumber.domain.model.getMessage
import com.nfcbumber.domain.util.toHexString

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CardDetailsScreen(
    card: Card,
    onBack: () -> Unit
) {
    val compatibility = card.getCompatibility()

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ") },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Default.ArrowBack, "–ù–∞–∑–∞–¥")
                    }
                }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .verticalScroll(rememberScrollState())
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Card Name
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = Color(card.color)
                )
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(20.dp)
                ) {
                    Text(
                        text = card.name,
                        style = MaterialTheme.typography.headlineMedium,
                        color = Color.White,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = card.cardType.name.replace('_', ' '),
                        style = MaterialTheme.typography.bodyLarge,
                        color = Color.White.copy(alpha = 0.9f)
                    )
                }
            }

            // Safety Information
            SafetyInfoCard()

            // Compatibility Status
            CompatibilityCard(compatibility)

            // Technical Details
            TechnicalDetailsCard(card)

            // Intercom Specific Info
            if (card.cardType.name.contains("MIFARE")) {
                IntercomInfoCard()
            }
        }
    }
}

@Composable
fun SafetyInfoCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.5f)
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = "üõ°Ô∏è",
                    style = MaterialTheme.typography.headlineMedium
                )
                Text(
                    text = "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary
                )
            }

            Text(
                text = """
                    ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å NFC –º–æ–¥—É–ª—å
                    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Android HCE API
                    ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ
                    ‚úÖ –ù–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
                    ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
                    
                    Android HCE - —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ—Ç Google, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ, –∫–∞–∫ Apple Pay –∏–ª–∏ Google Pay. –ú–∏–ª–ª–∏–æ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ—ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º.
                """.trimIndent(),
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurface
            )
        }
    }
}

@Composable
fun CompatibilityCard(compatibility: CardCompatibility) {
    val (backgroundColor, iconColor) = when (compatibility) {
        CardCompatibility.FULL_HCE ->
            MaterialTheme.colorScheme.primaryContainer to MaterialTheme.colorScheme.primary
        CardCompatibility.UID_ONLY ->
            MaterialTheme.colorScheme.tertiaryContainer to MaterialTheme.colorScheme.tertiary
        CardCompatibility.NOT_SUPPORTED ->
            MaterialTheme.colorScheme.errorContainer to MaterialTheme.colorScheme.error
        CardCompatibility.UNKNOWN ->
            MaterialTheme.colorScheme.surfaceVariant to MaterialTheme.colorScheme.onSurfaceVariant
    }

    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = backgroundColor
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Icon(
                    imageVector = if (compatibility == CardCompatibility.NOT_SUPPORTED)
                        Icons.Default.Warning else Icons.Default.Info,
                    contentDescription = null,
                    tint = iconColor,
                    modifier = Modifier.size(32.dp)
                )
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                        style = MaterialTheme.typography.labelLarge,
                        color = iconColor
                    )
                    Text(
                        text = compatibility.getMessage(),
                        style = MaterialTheme.typography.bodyLarge,
                        fontWeight = FontWeight.Bold
                    )
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = compatibility.getDescription(),
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurface
            )
        }
    }
}

@Composable
fun TechnicalDetailsCard(card: Card) {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text(
                text = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )

            DetailRow("UID", card.uid.toHexString())

            card.ats?.let { ats ->
                if (ats.isNotEmpty()) {
                    DetailRow("ATS", ats.toHexString())
                }
            }

            card.historicalBytes?.let { historicalBytes ->
                if (historicalBytes.isNotEmpty()) {
                    DetailRow("Historical Bytes", historicalBytes.toHexString())
                }
            }

            DetailRow("–¢–∏–ø –∫–∞—Ä—Ç—ã", card.cardType.name.replace('_', ' '))
            DetailRow("–î–ª–∏–Ω–∞ UID", "${card.uid.size} –±–∞–π—Ç")
        }
    }
}

@Composable
fun DetailRow(label: String, value: String) {
    Column {
        Text(
            text = label,
            style = MaterialTheme.typography.labelMedium,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Medium
        )
    }
}

@Composable
fun IntercomInfoCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.secondaryContainer
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = "üè†",
                    style = MaterialTheme.typography.headlineMedium
                )
                Text(
                    text = "–î–ª—è –¥–æ–º–æ—Ñ–æ–Ω–æ–≤",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
            }

            Text(
                text = """
                    –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Mifare Classic –∫–∞—Ä—Ç—ã –∏ —á–∏—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ UID –Ω–∞ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ (–∞–Ω—Ç–∏–∫–æ–ª–ª–∏–∑–∏—è).
                    
                    ‚ö†Ô∏è Android HCE –Ω–µ –º–æ–∂–µ—Ç —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∫–∞—Ä—Ç—ã –±–µ–∑ root –ø—Ä–∞–≤.
                    
                    –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:
                    ‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–º–æ—Ñ–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç ISO-DEP - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
                    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ NFC-–∫–æ–ª—å—Ü–æ
                    ‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å root: NFC Card Emulator Pro
                    ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
                """.trimIndent(),
                style = MaterialTheme.typography.bodyMedium
            )
        }
    }
}

